version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  ruby: circleci/ruby@1.1.1
  node: circleci/node@4.0.1
  heroku: circleci/heroku@1.2.2
  codeclimate: cci-orb/codeclimate@0.0.1

jobs:
  build-test: # our first job, named "build-test"
    docker:
      - image: cimg/ruby:2.7-node # use a tailored CircleCI docker image.
    steps:
      - checkout # pull down our git code.
      - ruby/install-deps # use the ruby orb to install dependencies
      # use the node orb to install our packages
      # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
      # learn more: https://circleci.com/docs/2.0/caching/
      - node/install-packages:
          pkg-manager: yarn

  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 3
    # here we set TWO docker images.
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
      - image: circleci/postgres:12-alpine
        environment: # add POSTGRES environment variables.
          POSTGRES_USER: the_cat_factory
          POSTGRES_DB: the_cat_factory_test
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: the_cat_factory
      PGPASSWORD: ""
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build-test".
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test
  deploy:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - heroku/push-docker-image


# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:        # The name of our workflow is "build_and_test"
    jobs:                # The list of jobs we run as part of this workflow.
      - build-test       # Run build first.
      - test:            # Then run test,
          requires:      # Test requires that build passes for it to run.
            - build-test # Finally, run the build job.
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master
